<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on The Tavern</title><link>https://vtavernier.github.io/pr-preview/pr-4/tags/git/</link><description>Recent content in git on The Tavern</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><lastBuildDate>Mon, 08 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vtavernier.github.io/pr-preview/pr-4/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git is your friend, not your enemy — Part 3</title><link>https://vtavernier.github.io/pr-preview/pr-4/posts/git-is-your-friend-part-3/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/pr-preview/pr-4/posts/git-is-your-friend-part-3/</guid><description>This post is the third part of a tutorial series on how to use Git to its full potential. You may want to read the first part and the second part before proceeding.
Finding bugs with Git: problem statement You are working on a large-ish project which is &amp;mdash; thankfully &amp;mdash; under version control. This could be a project with a large amount of code, with many contributors and thus a lot of activity, or maybe some software you are using that you decided to contribute to by fixing some bugs.</description></item><item><title>Git is your friend, not your enemy — Part 2</title><link>https://vtavernier.github.io/pr-preview/pr-4/posts/git-is-your-friend-part-2/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/pr-preview/pr-4/posts/git-is-your-friend-part-2/</guid><description>This post is the second part of a tutorial series on how to use Git to its full potential. Read the first part here.
We ended the previous part of this tutorial on merging local changes with remote changes. That last part assumed there was no merge conflict &amp;mdash; a situation you may have already encountered in the wild. We will now look at how to solve those conflicts efficiently, which becomes critical for the next part, maintaining a clean Git history using interactive rebasing.</description></item><item><title>Git is your friend, not your enemy — Part 1</title><link>https://vtavernier.github.io/pr-preview/pr-4/posts/git-is-your-friend-part-1/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/pr-preview/pr-4/posts/git-is-your-friend-part-1/</guid><description>This post is the first part of a tutorial series on how to use Git to its full potential, based on my personal experience and online resources. Although this tutorial will cover some basic parts of using Git, this tutorial is not adapted if you have no experience at all. The first few chapters of the Pro Git book are a good place to start.
A common trend among inexperienced Git users is to think of Git as a burden that they need to carry along while also doing the rest of their work.</description></item></channel></rss>