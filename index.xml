<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Tavern</title><link>https://vtavernier.github.io/</link><description>Recent content on The Tavern</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><lastBuildDate>Mon, 26 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vtavernier.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>glslt</title><link>https://vtavernier.github.io/projects/glslt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/glslt/</guid><description>glslt
glslt is a prototype language for adding template functions to the GLSL language.
Although they are not strictly needed for basic shading operations, they are of particular interest for designing reusable GLSL components which agree on common interfaces, as function pointers (or callbacks) would provide.
Table of contents Installation Usage Static template function parameters Lambda template function parameters Named placeholders Nested lambda expressions Support for include directives Minifying mode Features Bindings Rust Python Limitations Author Installation Check out the releases for pre-compiled binaries for stable versions.</description></item><item><title>glsl-lang</title><link>https://vtavernier.github.io/projects/glsl-lang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/glsl-lang/</guid><description>glsl-lang
glsl-lang is a crate implementing a LALR parser for the GLSL 4.x language, with partial support for preprocessor directives. Its AST and features are modeled after Dimitri Sabadie&amp;rsquo;s glsl crate.
Table of contents Repository structure glsl-lang vs. glsl crates Why pick this crate? It&amp;rsquo;s fast Syntax nodes have location information Re-written GLSL transpiler glsl-lang-quote quoting support Why not pick this crate?</description></item><item><title>txkit</title><link>https://vtavernier.github.io/projects/txkit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/txkit/</guid><description>txkit
TextureKit (txkit) is an implementation of common procedural texturing techniques used in computer graphics. It&amp;rsquo;s a Rust library which can be used from other Rust programs as well as through its C API.
License: MIT</description></item><item><title>tinygl</title><link>https://vtavernier.github.io/projects/tinygl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/tinygl/</guid><description>tinygl
tinygl is an environment to create OpenGL programs in Rust with:
Pre-processing of GLSL shader code (#include support, syntax checking, etc.), using shaderc Conversion of GLSL shaders to SPIR-V or transpilation to GLSL ES for WebGL, also using shaderc Rust code generation for loading shaders, programs and type-checked uniform setter methods This is a project currently under heavy development, do not expect any kind of stability for a while.</description></item><item><title>hyperion.rs</title><link>https://vtavernier.github.io/projects/hyperion.rs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/hyperion.rs/</guid><description>hyperion.rs
hyperion.rs is a rewrite of hyperion.ng in the Rust Programming Language. This version features:
Very low resource requirements (can be run on a single thread, useful for the Raspberry Pi Zero for example) No memory leaks (most allocations are static anyways) Easy to compile and cross-compile Disclaimer: this is an early work-in-progress:
A lot of internals may still change, in case you would like to contribute please contact me beforehand.</description></item><item><title>libshadertoy</title><link>https://vtavernier.github.io/projects/libshadertoy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/libshadertoy/</guid><description>libshadertoy
libshadertoy is a C++ library for rendering multipass programs using OpenGL desktop. Its defaults allow running programs written for the shadertoy website, but it can be easily extended. This library can be either compiled from source, or installed from the built Debian packages.
Introduction Installing Testing Using the examples Documentation Read the online documentation.</description></item><item><title>cg-local-app.rs</title><link>https://vtavernier.github.io/projects/cg-local-app-rs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/cg-local-app-rs/</guid><description>cg-local-app.rs
Rust implementation of the client-side application for the CG Local extension. This is a drop-in replacement for the original Java application which works with the original browser extension.
Install Pre-built packages Check the releases for binaries from your operating system.
Using cargo cargo install --force cg-local-app From source git clone https://github.</description></item><item><title>efiboot-rs</title><link>https://vtavernier.github.io/projects/efiboot-rs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/efiboot-rs/</guid><description>efiboot-rs
This repository contains the source code for:
efivar - A Rust crate to read and write EFI variables efiboot - A command-line tool to manage the UEFI boot manager The efiboot tool supports both Windows and Linux:
Windows: administrative rights are required to both read and write variables. Linux: efivarfs should be mounted at /sys/firmware/efi/efivars on all major distros.</description></item><item><title>Arduino Internals — What's behind the magic?</title><link>https://vtavernier.github.io/posts/arduino-internals-whats-behind-the-magic/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/arduino-internals-whats-behind-the-magic/</guid><description>Arduino is an open-source software and hardware platform tailored for electronics beginners and enthusiasts alike. Since the early models' releases (Arduino Diecimila in 2007 and Duemilanove in 2009), they have become ubiquitous to the point that &amp;ldquo;an Arduino&amp;rdquo; is often used as a synonym for &amp;ldquo;a microcontroller&amp;rdquo;, and have been used in countless projects by makers around the world.
An Arduino Duemilanove. The first Arduino I actually programmed. Source: Wikipedia What this project actually achieved is simplifying microcontroller programming to the extreme, replacing obscure datasheet diving and reference implementation diagrams dissection with intuitive function calls mostly portable across the entire official product range.</description></item><item><title>Git is your friend, not your enemy — Part 3</title><link>https://vtavernier.github.io/posts/git-is-your-friend-part-3/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/git-is-your-friend-part-3/</guid><description>This post is the third part of a tutorial series on how to use Git to its full potential. You may want to read the first part and the second part before proceeding.
Finding bugs with Git: problem statement You are working on a large-ish project which is &amp;mdash; thankfully &amp;mdash; under version control. This could be a project with a large amount of code, with many contributors and thus a lot of activity, or maybe some software you are using that you decided to contribute to by fixing some bugs.</description></item><item><title>Git is your friend, not your enemy — Part 2</title><link>https://vtavernier.github.io/posts/git-is-your-friend-part-2/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/git-is-your-friend-part-2/</guid><description>This post is the second part of a tutorial series on how to use Git to its full potential. Read the first part here.
We ended the previous part of this tutorial on merging local changes with remote changes. That last part assumed there was no merge conflict &amp;mdash; a situation you may have already encountered in the wild. We will now look at how to solve those conflicts efficiently, which becomes critical for the next part, maintaining a clean Git history using interactive rebasing.</description></item><item><title>Git is your friend, not your enemy — Part 1</title><link>https://vtavernier.github.io/posts/git-is-your-friend-part-1/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/git-is-your-friend-part-1/</guid><description>This post is the first part of a tutorial series on how to use Git to its full potential, based on my personal experience and online resources. Although this tutorial will cover some basic parts of using Git, this tutorial is not adapted if you have no experience at all. The first few chapters of the Pro Git book are a good place to start.
A common trend among inexperienced Git users is to think of Git as a burden that they need to carry along while also doing the rest of their work.</description></item><item><title>Welcome to My Blog</title><link>https://vtavernier.github.io/posts/welcome-to-my-blog/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/welcome-to-my-blog/</guid><description>This is where I will post write-ups on various projects I have or am currently maintaining, as well as some various tutorials on tools and techniques I have encountered along the way.
Stay tuned!</description></item><item><title>About me</title><link>https://vtavernier.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/about/</guid><description>I am a systems and computer graphics engineer with experience in research, but with many other interests like open-source software, language theory, electronics and music. I am always learning new skills out of curiosity or as part of my personal projects, and hope to share those discoveries on here when I have the time to write about them. Stay tuned!
If you are hiring and reading this, you might be interested in my resume (french, english).</description></item><item><title>Research</title><link>https://vtavernier.github.io/research/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/research/</guid><description>I am currently working in the INRIA team MAVERICK. You can also check out my personal page on the team&amp;rsquo;s website here.
Publications 2020Freely orientable microstructures for designing deformable 3D prints Thibault Tricard, Vincent Tavernier, Cédric Zanni, Jonàs Martínez, Pierre-Alexandre Hugron, Fabrice Neyret, Sylvain Lefebvre
ACM Transactions on Graphics, Association for Computing Machinery, In press, &amp;#x27E8;10.1145/3414685.3417790&amp;#x27E9;
Nature offers a marvel of astonishing and rich deformation behaviors.</description></item></channel></rss>