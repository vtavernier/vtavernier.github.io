<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Tavern</title><link>https://vtavernier.github.io/</link><description>Recent content on The Tavern</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><lastBuildDate>Mon, 11 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vtavernier.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>glslt</title><link>https://vtavernier.github.io/projects/glslt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/glslt/</guid><description>glslt glslt is a prototype language for adding template functions to the GLSL language.
Although they are not strictly needed for basic shading operations, they are of particular interest for designing reusable GLSL components which agree on common interfaces, as function pointers (or callbacks) would provide.
Table of contents Installation Usage Static template function parameters Lambda template function parameters Named placeholders Nested lambda expressions Support for include directives Minifying mode Features Bindings Rust Python Limitations Author Installation Check out the releases for pre-compiled binaries for stable versions.</description></item><item><title>txkit</title><link>https://vtavernier.github.io/projects/txkit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/txkit/</guid><description>txkit TextureKit (txkit) is an implementation of common procedural texturing techniques used in computer graphics. It&amp;rsquo;s a Rust library which can be used from other Rust programs as well as through its C API.
License: MIT</description></item><item><title>tinygl</title><link>https://vtavernier.github.io/projects/tinygl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/tinygl/</guid><description>tinygl tinygl is an environment to create OpenGL programs in Rust with:
Pre-processing of GLSL shader code (#include support, syntax checking, etc.), using shaderc Conversion of GLSL shaders to SPIR-V or transpilation to GLSL ES for WebGL, also using shaderc Rust code generation for loading shaders, programs and type-checked uniform setter methods This is a project currently under heavy development, do not expect any kind of stability for a while.</description></item><item><title>hyperion.rs</title><link>https://vtavernier.github.io/projects/hyperion.rs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/hyperion.rs/</guid><description>hyperion.rs hyperion.rs is a Rust implementation of the Hyperion open-source ambient lighting software.
hyperiond/ : daemon program and usage instructions hyperion/ : core functionality implementation Requirements Rust stable protobuf compiler , protobuf-compiler on Debian distributions Usage Get the source for the project:
git clone https://github.com/vtavernier/hyperion.rs.git cd hyperion.rs Assuming the following config.yml:
devices: - name: Raw UDP device frequency: 30 # Hz idle: delay: 5s # Consider device idle after 5s holds: true # This device holds the last command forever retries: 3 # Unreliable device, retry sending packets 3 times during idle updates endpoint: type: udp address: 192.</description></item><item><title>libshadertoy</title><link>https://vtavernier.github.io/projects/libshadertoy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/libshadertoy/</guid><description>libshadertoy libshadertoy is a C++ library for rendering multipass programs using OpenGL desktop. Its defaults allow running programs written for the shadertoy website, but it can be easily extended. This library can be either compiled from source, or installed from the built Debian packages.
Introduction Installing Testing Using the examples Documentation Read the online documentation .</description></item><item><title>efiboot-rs</title><link>https://vtavernier.github.io/projects/efiboot-rs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/projects/efiboot-rs/</guid><description>efiboot-rs This repository contains the source code for:
efivar - A Rust crate to read and write EFI variables efiboot - A command-line tool to manage the UEFI boot manager The efiboot tool supports both Windows and Linux:
Windows: administrative rights are required to both read and write variables. Linux: efivarfs should be mounted at /sys/firmware/efi/efivars on all major distros.</description></item><item><title>Git is your friend, not your enemy — Part 1</title><link>https://vtavernier.github.io/posts/git-is-your-friend-part-1/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/git-is-your-friend-part-1/</guid><description>This post is the first part of a tutorial series on how to use Git to its full potential, based on my personal experience and online resources. Although this tutorial will cover some basic parts of using Git, this tutorial is not adapted if you have no experience at all. The first few chapters of the Pro Git book are a good place to start.
A common trend among inexperienced Git users is to think of Git as a burden that they need to carry along while also doing the rest of their work.</description></item><item><title>Welcome to My Blog</title><link>https://vtavernier.github.io/posts/welcome-to-my-blog/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/posts/welcome-to-my-blog/</guid><description>This is where I will post write-ups on various projects I have or am currently maintaining, as well as some various tutorials on tools and techniques I have encountered along the way.
Stay tuned!</description></item><item><title>Research</title><link>https://vtavernier.github.io/research/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vtavernier.github.io/research/</guid><description>I am currently working in the INRIA team MAVERICK. You can also check out my personal page on the team&amp;rsquo;s website here .
Publications 2020Freely orientable microstructures for designing deformable 3D prints Thibault Tricard, Vincent Tavernier, Cédric Zanni, Jonàs Martínez, Pierre-Alexandre Hugron, Fabrice Neyret, Sylvain Lefebvre
ACM Transactions on Graphics, Association for Computing Machinery, In press, &amp;#x27E8;10.1145/3414685.3417790&amp;#x27E9;
Nature offers a marvel of astonishing and rich deformation behaviors. Yet, most of the objects we fabricate are comparatively rather inexpressive, either rigid or having simple homogeneous behaviors when interacted with.</description></item></channel></rss>